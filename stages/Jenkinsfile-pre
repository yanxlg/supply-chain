def docker_login = 'aws ecr get-login --no-include-email --region us-east-1'

pipeline {
    agent {
        label 'deployer-vova'
    }
    options {
        timestamps()
        disableConcurrentBuilds()
        ansiColor('vga')
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '100'))
    }
    parameters {
        string(name: 'refspec',
            defaultValue: 'master',
            description: 'which branch or commit id?'
        )
        booleanParam(name: 'NpmInstall',
            defaultValue: false,
            description: 'Need run npm install?'
        )
    }
    stages {
        stage('docker login') {
            agent {
                label 'deployer-vova'
            }
            options {
                skipDefaultCheckout true
            }
            steps {
                script {
                    docker_login = sh(returnStdout: true, script: 'aws ecr get-login --no-include-email --region us-east-1')
                }
            }
        }
        stage('Building image') {
            agent {
                label 'deployer-vova'
            }
            options {
                skipDefaultCheckout true
            }
            steps {
                script {
                    checkout([ $class: 'GitSCM',
                               branches: [[name: "$refspec"]],
                               userRemoteConfigs: [[url: 'ssh://git@git.gitvv.com:38022/frontend/supply-chain.git', credentialsId: 'b86f9919-deee-4bdf-94fc-c81fa69186c2',]]])
                    if (NpmInstall == "true" || !fileExists("./node_modules")) {
                        sh "docker run -u 0 --rm -v \$(pwd):/opt/app-root/supply-chain --name supply-chain-build node:10 bash -c 'cd /opt/app-root/supply-chain;npm install'"
                    }
                    sh "docker run --rm -v \$(pwd):/opt/app-root/supply-chain --name supply-chain-build node:10 bash -c 'cd /opt/app-root/supply-chain;npm run build'; \
                        sudo chown -R ec2-user.ec2-user \$(pwd); \
                        git rev-parse --short HEAD > dist/version; \
                    "
                    sh "${docker_login}"
                    sh "docker build --no-cache --network=host -f Dockerfile -t 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain:page-pre .; \
                        docker push 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain:page-pre; \
                        docker tag 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain:page-pre 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain; \
                        docker push 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain; \
                        docker rmi 832373879023.dkr.ecr.us-east-1.amazonaws.com/supply-chain:page-pre; \
                       "
                }
            }
        }
        stage('restart pod') {
            agent {
                label 'deployer-vova'
            }
            options {
                skipDefaultCheckout true
            }
            steps {
                script {
                    checkout([ $class: 'GitSCM',
                               branches: [[name: "$refspec"]],
                               userRemoteConfigs: [[url: 'ssh://git@git.gitvv.com:38022/frontend/supply-chain.git', credentialsId: 'b86f9919-deee-4bdf-94fc-c81fa69186c2',]]])
                    sh """export KUBECONFIG=~/.kube/config--vv-eks-service-backend-1; \
                          kubectl apply -f stages/manifests/supply-chain-svc-pre.yaml; \
                          kubectl get pod -n default | grep 'frontend-supply-chain-page-pre' | awk '{print \$1}' \
                              | while read podName; do kubectl get pod \$podName -n default -o yaml \
                              | kubectl replace --force -f -; done; \
                    """
                }
            }
        }
    }
}
